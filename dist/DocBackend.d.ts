import * as Backend from "automerge/backend";
import { Change, BackDoc } from "automerge/backend";
import Queue from "./Queue";
import { RepoBackend } from "./RepoBackend";
import { Clock } from "./Clock";
import { List } from 'immutable';
export declare class DocBackend {
    id: string;
    actorId?: string;
    clock: Clock;
    changes: Map<string, number>;
    ready: Queue<Function>;
    private back?;
    private repo;
    private remoteClock?;
    private synced;
    private localChangeQ;
    private remoteChangesQ;
    private wantsActor;
    constructor(core: RepoBackend, id: string, back?: BackDoc);
    history: () => List<Backend.Change>;
    testForSync: () => void;
    target: (clock: Clock) => void;
    applyRemoteChanges: (changes: Backend.Change[]) => void;
    applyLocalChange: (change: Backend.Change) => void;
    release: () => void;
    initActor: () => void;
    updateClock(changes: Change[]): void;
    init: (changes: Backend.Change[], actorId?: string | undefined) => void;
    subscribeToRemoteChanges(): void;
    subscribeToLocalChanges(): void;
    private bench;
}
